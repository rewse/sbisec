#!/usr/bin/env python3
###############################################################################
# @(#) SBI Securities Scraper
#
# Get the number of shares from SBI Securities 
#
#
# MIT License
#
# Copyright (c) Shibata, Tats
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
###############################################################################
# {{{ const

__version__ = "2.0"

LOGIN_URL = "https://www.sbisec.co.jp/ETGate"

# }}}
# {{{ import

from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
import getopt
import sys
import urllib.parse

# }}}
# {{{ usage()

def usage():
    print("""
[USAGE] sbisec [-V] <USERNAME> <PASSWORD>

OPTION:
    -V, --version         Output version information and exit
""", file=sys.stderr)

# }}}
# {{{ version()

def version():
    print("SBI Securities Scraper %s " % (__version__))

# }}}
# {{{ Option

class Option(object):
    def __init__(self, opts, args):
        self._set_opts(opts)
        self._set_args(args)

    def _set_opts(self, opts):
        for o, a in opts:
            if o in ("-V", "--version"):
                version()
                sys.exit(1)

    def _set_args(self, args):
        if len(args) > 0:
            self.username = args[0]
        else:
            self.username = input("Username: ")

        if len(args) > 1:
            self.password = args[1]
        else:
            self.password = input("Password: ")

# }}}
# {{{ valid_opt()

def valid_opt(argv):
    try:
        opts, args = getopt.gnu_getopt(
            argv[1:],
            "V",
            ["version"]
        )
    except getopt.GetoptError:
        print("[ERROR] Unknown option", file=sys.stderr)
        usage()
        sys.exit(1)

    return Option(opts, args)

# }}}
# {{{ obtain_html

def obtain_html(username, password):
    o = Options()
    o.add_argument("--headless")

    try:
        driver = webdriver.Chrome(options = o)

        # Login
        driver.get(LOGIN_URL)
        driver.find_element_by_css_selector("input[name='user_id']").send_keys(username)
        driver.find_element_by_css_selector("input[name='user_password']").send_keys(password)
        driver.find_element_by_css_selector("input[name='ACT_login']").click()
        driver.implicitly_wait(10)

        # Click "Portfolio"
        driver.find_element_by_css_selector("img[title='ポートフォリオ']").click()
        driver.implicitly_wait(10)

        driver.find_element_by_id("FOOTER01")
        return driver.page_source
    finally:
        driver.quit()

# }}}
# {{{ obtain_funds()

def obtain_funds(html):
    soup = BeautifulSoup(html, "html.parser")
    anchors = soup.select(
        "table[bgcolor='#9fbf99'] td[bgcolor='#ffffff']:nth-child(2) a, "
        "table[bgcolor='#9fbf99'] td[bgcolor='#eaf4e8']:nth-child(2) a"
    )
    shares = soup.select(
        "table[bgcolor='#9fbf99'] td[bgcolor='#ffffff']:nth-child(4), "
        "table[bgcolor='#9fbf99'] td[bgcolor='#eaf4e8']:nth-child(4)"
    )

    out = []
    i = 0
    for anchor in anchors:
        fund_id = urllib.parse.parse_qs(
            urllib.parse.urlparse(anchor.get("href")).query
        )["fund_sec_code"][0]

        share = shares[i].get_text(strip = True).replace(",", "")

        out.append({"id": fund_id, "shares": share})

        i = i + 1

    return out

# }}}
# {{{ main()

def main():
    opt = valid_opt(sys.argv)

    html = obtain_html(opt.username, opt.password)

    funds = obtain_funds(html)

    for fund in funds:
        print("%s,%s" % (fund["id"], fund["shares"]))

    exit(0)

if __name__ == "__main__":
    main()